package Wsdl2Code.WebServices.MinyanWSService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 8/27/2014 2:40:02 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import Wsdl2Code.WebServices.MinyanWSService.WS_Enums.*;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
//import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class MinyanWSService {

    public String NAMESPACE = "http://api/";

    private  String url = "http://vmedu61.mtacloud.co.il:8080/Minyan/MinyanWS?wsdl";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;

    public MinyanWSService() {
    }

    public MinyanWSService(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public MinyanWSService(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public MinyanWSService(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void findUserByIdAsync(String arg0) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        findUserByIdAsync(arg0);
    }
    

/*
    
    public void isUserIsValidAsync(String arg0,String arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        isUserIsValidAsync(arg0, arg1, null);
    }
    
    public void isUserIsValidAsync(final String arg0,final String arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return f(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("isUserIsValid", result);
                }
            }
        }.execute();
    }
    /*
    public int isUserIsValid(String arg0,String arg1){
        return isUserIsValid(arg0, arg1, null);
    }
    
    public int isUserIsValid(String arg0,String arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://api/","isUserIsValid");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://api/MinyanWS/isUserIsValidRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://api/MinyanWS/isUserIsValidRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    
    public void joinToMinyanAsync(int arg0,int arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        joinToMinyanAsync(arg0, arg1, null);
    }
    /*
    public void joinToMinyanAsync(final int arg0,final int arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return joinToMinyan(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("joinToMinyan", result);
                }
            }
        }.execute();
    }


    public boolean joinToMinyan(int arg0,int arg1){
        return joinToMinyan(arg0, arg1, null);
    }
    /*
    public boolean joinToMinyan(int arg0,int arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://api/","joinToMinyan");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://api/MinyanWS/joinToMinyanRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://api/MinyanWS/joinToMinyanRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    */

    public void insertUserAsync(String arg0, String arg1, String arg2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        insertUserAsync(arg0, arg1, arg2, null);
    }

    public void insertUserAsync(final String arg0, final String arg1, final String arg2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return insertUser(arg0, arg1, arg2, headers);
            }

            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("insertUser", result);
                }
            }
        }.execute();
    }

    public boolean insertUser(String arg0, String arg1, String arg2) {
        return insertUser(arg0, arg1, arg2, null);
    }

    public boolean insertUser(String arg0, String arg1, String arg2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = false;
        SoapObject soapReq = new SoapObject("http://api/", "insertUser");
        soapReq.addProperty("arg0", arg0);
        soapReq.addProperty("arg1", arg1);
        soapReq.addProperty("arg2", arg2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url);
        try {
            if (headers != null) {
                httpTransport.call("http://api/MinyanWS/insertUserRequest", soapEnvelope);
            } else {
                httpTransport.call("http://api/MinyanWS/insertUserRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
}
    /*
    public void getSidurAsync(String arg0,String arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getSidurAsync(arg0, arg1, null);
    }
    
    public void getSidurAsync(final String arg0,final String arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getSidur(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getSidur", result);
                }
            }
        }.execute();
    }
    
    public String getSidur(String arg0,String arg1){
        return getSidur(arg0, arg1, null);
    }
    
    public String getSidur(String arg0,String arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://api/","getSidur");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url);
        try{
            if (headers!=null){
                httpTransport.call("http://api/MinyanWS/getSidurRequest", soapEnvelope);
            }else{
                httpTransport.call("http://api/MinyanWS/getSidurRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getUserIdByMailAsync(String arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getUserIdByMailAsync(arg0, null);
    }
    
    public void getUserIdByMailAsync(final String arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return getUserIdByMail(arg0, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getUserIdByMail", result);
                }
            }
        }.execute();
    }
    
    public int getUserIdByMail(String arg0){
        return getUserIdByMail(arg0, null);
    }
    
    public int getUserIdByMail(String arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://api/","getUserIdByMail");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://api/MinyanWS/getUserIdByMailRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://api/MinyanWS/getUserIdByMailRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void createPreferencesAsync(String arg0,int arg1,prayerType arg2,boolean arg2Specified,boolean arg3,String arg4,String arg5,double arg6,double arg7,int arg8) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        createPreferencesAsync(arg0, arg1, arg2, arg2Specified, arg3, arg4, arg5, arg6, arg7, arg8, null);
    }
    
    public void createPreferencesAsync(final String arg0,final int arg1,final prayerType arg2,final boolean arg2Specified,final boolean arg3,final String arg4,final String arg5,final double arg6,final double arg7,final int arg8,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return createPreferences(arg0, arg1, arg2, arg2Specified, arg3, arg4, arg5, arg6, arg7, arg8, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("createPreferences", result);
                }
            }
        }.execute();
    }
    
    public int createPreferences(String arg0,int arg1,prayerType arg2,boolean arg2Specified,boolean arg3,String arg4,String arg5,double arg6,double arg7,int arg8){
        return createPreferences(arg0, arg1, arg2, arg2Specified, arg3, arg4, arg5, arg6, arg7, arg8, null);
    }
    
    public int createPreferences(String arg0,int arg1,prayerType arg2,boolean arg2Specified,boolean arg3,String arg4,String arg5,double arg6,double arg7,int arg8,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://api/","createPreferences");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2.toString());
        soapReq.addProperty("arg2Specified",arg2Specified);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapReq.addProperty("arg5",arg5);
        soapReq.addProperty("arg6",arg6);
        soapReq.addProperty("arg7",arg7);
        soapReq.addProperty("arg8",arg8);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://api/MinyanWS/createPreferencesRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://api/MinyanWS/createPreferencesRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void findPrefByUserAsync(String arg0,String arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        findPrefByUserAsync(arg0, arg1, null);
    }
    
    public void findPrefByUserAsync(final String arg0,final String arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, preferences>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected preferences doInBackground(Void... params) {
                return findPrefByUser(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(preferences result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("findPrefByUser", result);
                }
            }
        }.execute();
    }
    
    public preferences findPrefByUser(String arg0,String arg1){
        return findPrefByUser(arg0, arg1, null);
    }
    
    public preferences findPrefByUser(String arg0,String arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://api/","findPrefByUser");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://api/MinyanWS/findPrefByUserRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://api/MinyanWS/findPrefByUserRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    preferences resultVariable =  new preferences (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getCloseMinyansAsync(double arg0,double arg1,int arg2) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getCloseMinyansAsync(arg0, arg1, arg2, null);
    }
    
    public void getCloseMinyansAsync(final double arg0,final double arg1,final int arg2,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectorminyan>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectorminyan doInBackground(Void... params) {
                return getCloseMinyans(arg0, arg1, arg2, headers);
            }
            @Override
            protected void onPostExecute(Vectorminyan result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getCloseMinyans", result);
                }
            }
        }.execute();
    }
    
    public Vectorminyan getCloseMinyans(double arg0,double arg1,int arg2){
        return getCloseMinyans(arg0, arg1, arg2, null);
    }
    
    public Vectorminyan getCloseMinyans(double arg0,double arg1,int arg2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://api/","getCloseMinyans");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://api/MinyanWS/getCloseMinyansRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://api/MinyanWS/getCloseMinyansRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectorminyan resultVariable = new Vectorminyan(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}

 */
